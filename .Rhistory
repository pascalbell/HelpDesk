Month = fct_relevel(format(created, format = "%m"),
"08", "09", "10", "11", "12", "01",
"02", "03", "04", "05", "06", "07")) |>
mutate(Month = as.numeric(as.character(Month))) |>
mutate(Month_txt = my_month_names[as.numeric(Month)], .after = Month) |>
mutate(Month_txt = fct_relevel(Month_txt,
"August",
"September",
"October",
"November",
"December",
"January",
"February",
"March",
"April",
"May",
"June",
"July")) |>
mutate(Year = as.numeric(Year),
Day = as.numeric(Day)) |>
mutate(school_yr = if_else(created < "2022-08-01",
"2021-2022",
if_else(created < "2023-08-01",
"2022-2023",
if_else(created < "2024-08-01",
"2023-2024",
"2024-2025")))) |>
filter(client_1 != "(Deleted User)")
## ADD NEW YEARS ON THE LINE ABOVE
#| label: enquries over time
jobs |>
filter(school_yr != "2021-2022") |>
group_by(school_yr, Month_txt) |>
count() |>
ggplot(aes(x = Month_txt, y = n, color = school_yr, group = school_yr)) +
geom_point() +
geom_line() +
scale_color_viridis_d() +
theme_bw() +
theme(axis.text.x = element_text(angle = 70, vjust = 1, hjust = 1)) +
labs(title = "Number of Client Enquiries Submitted Over Time",
x = "Month",
y = "Count",
color = "School Year")
#| label: converted monthly leads
hours_and_month_started |>
group_by(school_yr, Month_started) |>
summarize(converted_leads = n()) |>
ggplot(aes(x = Month_started,
y = converted_leads,
color = school_yr, group = school_yr)) +
geom_point() +
geom_line() +
scale_color_viridis_d() +
theme_bw() +
labs(x = "",
y = "Number of Clients",
title = "Number of Converted Leads Each Month",
subtitle = "Converted lead is a new client with at least one lesson",
color = "") +
theme(axis.text.x = element_text(angle = 70, vjust = 1, hjust = 1))
jobs |>
filter(school_yr != "2021-2022") |>
mutate("least_one_lesson" = if_else(nb_completed_units > 0, TRUE, FALSE)) |>
group_by(school_yr, Month_txt, least_one_lesson) |>
count()
jobs |>
select(client_1) |>
arrange(client_1)
#| label: hours-per-client
#| echo: false
#proportions <- c("66.3%", "59.4%", "41.6%", "32.2%")
#data_txt <- data.frame(label = proportions,
#                       group = names(table(all_years$school_yr)),
#                       hours_per_yr = c(15, 15, 15, 40),
#                       count = c(25, 25, 25, 25)
#                       )
graph <- all_years |>
group_by(Client, school_yr) |>
summarize(hours_per_yr = sum(Hours)) |>
filter(hours_per_yr < 100) |>
ggplot(aes(x = hours_per_yr)) +
geom_histogram(binwidth = 3, fill = "blue", color = "black") +
facet_wrap("school_yr", ncol = 2) +
scale_x_continuous(breaks = seq(0, 80, by = 10)) +
labs(x = "Hours Per Year",
y = "Count",
title = "Hours of Tutoring Per Client Per Year",
subtitle = "Percent of clients with 3 hours or less") +
geom_vline(xintercept = -1.5, color = "firebrick3") +
geom_vline(xintercept = 1.5, color = "firebrick3") +
scale_x_continuous(breaks = seq(0, 150, by = 6))
prop_under_3 <- all_years |>
group_by(Client, school_yr) |>
summarize(hours_per_yr = sum(Hours)) |>
arrange(desc(hours_per_yr)) |>
mutate(greater_1 = if_else(hours_per_yr <= 3, 1, 0)) |>
ungroup() |>
group_by(school_yr) |>
summarize(prop = mean(greater_1, na.rm = T))
prop_under_3
graph
#how to move this to the plots
#| label: avg hours per client
#table information
all_years |>
group_by(Client, school_yr) |>
summarize(hours_per_yr = sum(Hours),
profit_per_year = sum(Profit)) |>
filter(!is.na(hours_per_yr),
hours_per_yr < 100) |>
arrange(hours_per_yr, school_yr) |>
ungroup() |>
group_by(school_yr) |>
summarize(avg_hours = mean(hours_per_yr),
median_hours = median(hours_per_yr),
avg_profit = mean(profit_per_year),
lower_25 = quantile(hours_per_yr, 0.25),
upper_75 = quantile(hours_per_yr, 0.75))
#graphing this information in boxplot
all_years |>
group_by(Client, school_yr) |>
summarize(hours_per_yr = sum(Hours)) |>
filter(!is.na(hours_per_yr),
hours_per_yr < 100) |>
arrange(hours_per_yr, school_yr) |>
ungroup() |>
mutate(year_color_type = if_else(school_yr == "2024-2025", "firebrick3", "gray40")) |>
ggplot(aes(x = hours_per_yr, y = school_yr, color = year_color_type)) +
geom_boxplot() +
scale_color_identity() +
scale_x_continuous(breaks = seq(0, 150, by = 5)) +
theme_bw() +
labs(x = "Total Tutoring Hours per Client",
y = "School Year",
title = "Hours of Tutoring Per Client Throughout the Year")
#| label: proportion-under-1
#| echo: false
#under 1 for graph
prop_under_1 <- all_years |>
group_by(Client, school_yr) |>
summarize(hours_per_yr = sum(Hours)) |>
arrange(desc(hours_per_yr)) |>
mutate(greater_1 = if_else(hours_per_yr <= 1, 1, 0)) |>
ungroup() |>
group_by(school_yr) |>
summarize(prop = mean(greater_1, na.rm = T))
#under 1 and graph
prop_under_1 |>
mutate(prop = round(prop, 3) * 100) |>
ggplot(aes(x = as.factor(school_yr), y = prop, fill = school_yr)) +
geom_bar(stat = "identity", color = "black") +
theme(axis.text.x = element_blank()) +
scale_fill_viridis_d() +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
labs(x = "",
y = "Percent",
fill = "School Year",
title = "Clients With Only One Hour of Tutoring") +
geom_text(aes(label = prop), vjust = -.5, size = 3)
#| label: calculate-profit-over-time
#| echo: false
#function to calculate profit given dataset and date
calculate_profit <- function(dataset, date) {
profit <- dataset |>
filter(Date <= date) |>
summarize(sum = sum(Profit)) |>
pull(sum)
return(profit)
}
#pull each year's dates into list
dates_18 <- lessons_18 |>
pull(Date)
dates_19 <- lessons_19 |>
pull(Date)
dates_20 <- lessons_20 |>
pull(Date)
dates_21 <- lessons_21 |>
pull(Date)
dates_22 <- lessons_22 |>
pull(Date)
dates_23 <- lessons_23 |>
pull(Date)
dates_24 <- lessons_24 |>
pull(Date)
#add to list the sum at each date
profit_18 <- c()
for (date in dates_18) {
new_element <- calculate_profit(lessons_18, date)
profit_18[length(profit_18) + 1] <- new_element
}
profit_19 <- c()
for (date in dates_19) {
new_element <- calculate_profit(lessons_19, date)
profit_19[length(profit_19) + 1] <- new_element
}
profit_20 <- c()
for (date in dates_20) {
new_element <- calculate_profit(lessons_20, date)
profit_20[length(profit_20) + 1] <- new_element
}
profit_21 <- c()
for (date in dates_21) {
new_element <- calculate_profit(lessons_21, date)
profit_21[length(profit_21) + 1] <- new_element
}
profit_22 <- c()
for (date in dates_22) {
new_element <- calculate_profit(lessons_22, date)
profit_22[length(profit_22) + 1] <- new_element
}
profit_23 <- c()
for (date in dates_23) {
new_element <- calculate_profit(lessons_23, date)
profit_23[length(profit_23) + 1] <- new_element
}
profit_24 <- c()
for (date in dates_24) {
new_element <- calculate_profit(lessons_24, date)
profit_24[length(profit_23) + 1] <- new_element
}
#add sum list to the dataset
lessons_18 <- lessons_18 |>
mutate(total_profit = 0)
lessons_19 <- lessons_19 |>
mutate(total_profit = 0)
lessons_20 <- lessons_20 |>
mutate(total_profit = 0)
lessons_21 <- lessons_21 |>
mutate(total_profit = 0)
lessons_22 <- lessons_22 |>
mutate(total_profit = 0)
lessons_23 <- lessons_23 |>
mutate(total_profit = 0)
lessons_24 <- lessons_24 |>
mutate(total_profit = 0)
#update total_profit values for each year
for (i in 1: nrow(lessons_18)) {
lessons_18$total_profit[i] <- as.numeric(profit_18[i])
}
for (i in 1: nrow(lessons_19)) {
lessons_19$total_profit[i] <- as.numeric(profit_19[i])
}
for (i in 1: nrow(lessons_20)) {
lessons_20$total_profit[i] <- as.numeric(profit_20[i])
}
for (i in 1: nrow(lessons_21)) {
lessons_21$total_profit[i] <- as.numeric(profit_21[i])
}
for (i in 1: nrow(lessons_22)) {
lessons_22$total_profit[i] <- as.numeric(profit_22[i])
}
for (i in 1: nrow(lessons_23)) {
lessons_23$total_profit[i] <- as.numeric(profit_23[i])
}
for (i in 1: nrow(lessons_24)) {
lessons_24$total_profit[i] <- as.numeric(profit_23[i])
}
#delete one row that has a 20k total_profit
lessons_21 <- lessons_21 |>
filter(Date != "2022-12-31")
#join data to one set
cumulative_profit <- lessons_19 |>
full_join(lessons_21 |>
slice(1:1573)) |>
full_join(lessons_22) |>
full_join(lessons_23) |>
full_join(lessons_24) |>
full_join(lessons_18) |>
full_join(lessons_20) |>
mutate(Year = format(Date, format = "%y"), .before = Date,
Day = format(Date, format = "%d"),
Month = format(Date, format = "%m"),
Date_No_Year = format(Date, format = "%m-%d"),
Profit = Revenue - Expense) |>
mutate(Month = fct_relevel(Month, "08", "09", "10", "11", "12", "01", "02",
"03", "04", "05", "06", "07")) |>
mutate(Month = as.numeric(as.character(Month))) |>
mutate(Month_txt = my_month_names[as.numeric(Month)], .after = Month) |>
mutate(Month_txt = fct_relevel(Month_txt,
"August",
"September",
"October",
"November",
"December",
"January",
"February",
"March",
"April",
"May",
"June",
"July"))
#FILTER DATE HERE
cumulative_profit <- cumulative_profit |>
filter(Date >= "2018-08-01",
Date <= "2025-06-15") |>
filter(Date_No_Year > "08-01" | Date_No_Year < "06-15")
#group_by date so that only one row per day
cumulative_profit <- cumulative_profit |>
group_by(school_yr, Month_txt, Month, Date) |>
summarize(total_profit = max(total_profit))
#graph
cumulative_profit |>
group_by(school_yr, Month_txt) |>
summarize(total_profit = max(total_profit)) |>
ggplot(aes(x = Month_txt, y = total_profit, color = school_yr)) +
geom_point() +
theme(axis.text.x = element_blank()) +
scale_color_viridis_d() +
theme_bw() +
labs(x = "Month",
y = "Total Profit",
color = "School Year",
title = "Total Profit over Time") +
scale_y_continuous(breaks = seq(0, 700000, by = 2000), label = dollar_format()) +
theme(axis.text.x = element_text(angle = 70, vjust = 1, hjust = 1))
#| label: linear graph for total profit
cumulative_profit |>
group_by(Month_txt, school_yr) |>
summarize(total_profit = max(total_profit)) |>
ggplot(aes(x = Month_txt,
y = total_profit,
color = school_yr,
group = school_yr)) +
geom_point() +
geom_smooth(method = "lm",
fullrange = TRUE,
se = FALSE,
level = .95) + #confidence interval
theme(axis.text.x = element_blank()) +
scale_color_viridis_d() +
theme_bw() +
labs(x = "Month",
y = "Total Profit",
color = "School Year",
title = "Projected Profit over Time") +
scale_y_continuous(breaks = seq(0, 100000, by = 10000),
label = dollar_format()) +
theme(axis.text.x = element_text(angle = 70, vjust = 1, hjust = 1))
summer_included |>
filter(Date >= "2021-08-01") |>
group_by(school_yr) |>
summarize(hours = sum(Hours, na.rm = T))
#| label: tutor income avg
#table
all_years |>
select(Tutor, Expense, Profit, school_yr, Hours) |>
group_by(school_yr, Tutor) |>
summarize(total_income = sum(Expense, na.rm = TRUE),
total_hours = sum(Hours, na.rm = TRUE),
total_profit = sum(Profit, na.rm = TRUE)) |>
ungroup() |>
group_by(school_yr) |>
summarize(avg_income = mean(total_income),
median_income = median(total_income),
avg_hours = mean(total_hours),
median_hours = median(total_hours),
avg_profit = mean(total_profit),
median_profit = median(total_profit))
#graph
all_years |>
select(Tutor, Expense, school_yr, Hours) |>
group_by(school_yr, Tutor) |>
summarize(total_income = sum(Expense, na.rm = TRUE),
total_hours = sum(Hours, na.rm = TRUE)) |>
ungroup() |>
ggplot(aes(x = total_income, y = school_yr, fill = school_yr)) +
geom_boxplot() +
labs(x = "Total Income",
y = "School Year",
title = "Annual Tutor Income") +
scale_fill_viridis_d() +
theme(legend.position = "none") +
scale_x_continuous(label = dollar_format())
#tutor income total
all_years |>
select(Tutor, Expense, school_yr, Profit) |>
filter(school_yr != "2018-2019",
school_yr != "2019-2020",
school_yr != "2020-2021") |>
group_by(Tutor) |>
summarize(total_income = sum(Expense, na.rm = TRUE),
total_profit = sum(Profit, na.rm = TRUE)) |>
arrange(desc(total_income))
#| label: highest paying clients
all_years |>
select(Client, Revenue, school_yr, Profit) |>
filter(school_yr != "2018-2019",
school_yr != "2019-2020",
school_yr != "2020-2021") |>
group_by(Client) |>
summarize(gross_income = sum(Revenue, na.rm = TRUE),
total_profit = sum(Profit, na.rm = TRUE)) |>
arrange(desc(gross_income))
#| label: num clients and tutors worked with
clients_worked_with <- all_years |>
filter(school_yr != "2018-2019",
school_yr != "2019-2020") |>
select(Client, school_yr) |>
group_by(Client, school_yr) |>
arrange(Client) |>
distinct(Client) |>
count(Client) |>
ungroup() |>
group_by(school_yr) |>
summarize(clients_worked_with = sum(n))
tutors_worked_with <- all_years |>
filter(school_yr != "2018-2019",
school_yr != "2019-2020") |>
select(Tutor, school_yr) |>
group_by(Tutor, school_yr) |>
arrange(Tutor) |>
distinct(Tutor) |>
count(Tutor) |>
ungroup() |>
group_by(school_yr) |>
summarize(tutors_worked_with = sum(n))
clients_worked_with |>
left_join(tutors_worked_with)
#| label: active clients and tutors per month
monthly_paying_clients <- all_years |>
group_by(school_yr, Month_txt) |>
distinct(Client) |>
summarize(num_clients = n())
monthly_paying_clients |>
ggplot(aes(x = Month_txt,
y = num_clients,
color = school_yr, group = school_yr)) +
geom_point() +
geom_line() +
scale_color_viridis_d() +
theme_bw() +
labs(x = "",
y = "Number of Clients",
title = "Number of Monthly Paying Clients",
color = "") +
theme(axis.text.x = element_text(angle = 70, vjust = 1, hjust = 1))
monthly_active_tutors <- all_years |>
group_by(school_yr, Month_txt) |>
distinct(Tutor) |>
summarize(num_tutors = n())
monthly_active_tutors |>
ggplot(aes(x = Month_txt,
y = num_tutors,
color = school_yr, group = school_yr)) +
geom_point() +
geom_line() +
scale_color_viridis_d() +
theme_bw() +
labs(x = "",
y = "Number of Tutors",
title = "Number of Active Tutors Each Month",
color = "") +
theme(axis.text.x = element_text(angle = 70, vjust = 1, hjust = 1))
summary_monthly_active_tutors <- monthly_active_tutors |>
group_by(school_yr) |>
summarize(mean_tutors = mean(num_tutors),
median_tutors = median(num_tutors))
summary_monthly_paying_clients <- monthly_paying_clients |>
group_by(school_yr) |>
summarize(mean_clients = mean(num_clients),
median_clients = median(num_clients))
summary_monthly_paying_clients |>
left_join(summary_monthly_active_tutors) |>
mutate(mean_tutor_client_ratio = mean_tutors/mean_clients,
median_tutor_client_ratio = median_tutors/median_clients)
#| label: experimenting profit per day
all_years |>
group_by(school_yr, Date_No_Year) |>
summarize(profit = sum(Profit)) |>
ggplot(aes(x = Date_No_Year, y = profit, color = school_yr)) +
geom_point(alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1)) +
theme_dark() +
scale_color_viridis_d() +
labs(x = "Date",
y = "Profit",
title = "Profit Per Day",
subtitle = "January - December",
color = "School Year")
#| label: lessons_23 testing, and model testing
lessons_23 |>
summarize(mean = mean(Profit),
median = median(Profit))
lessons_23 |>
group_by(Client) |>
summarize(total_hours = sum(Hours)) |>
summarize(mean_hours = mean(total_hours),
median_hours = median(total_hours))
cumulative_profit_for_reg <- cumulative_profit |>
mutate(school_yr = as.numeric(str_sub(school_yr, 1, 4))) |>
filter(school_yr != 2018 & school_yr != 2019)
interactive <- linear_reg() |>
set_engine("glm") |>
fit(total_profit ~ Month_txt * school_yr, data = cumulative_profit_for_reg)
additive <- linear_reg() |>
set_engine("glm") |>
fit(total_profit ~ Month_txt + school_yr, data = cumulative_profit_for_reg)
predict(interactive, data.frame(Month_txt = "June", school_yr = 2030))
predict(additive, data.frame(Month_txt = "June", school_yr = 2030))
predict(interactive, data.frame(Month_txt = "June", school_yr = 2025))
predict(interactive, data.frame(Month_txt = "June", school_yr = 2025))
allTutors <- read_csv("users.csv", na = "")
currentTutors <- read_csv("tutorcruncher-contractors.csv", na="")
approved <- allTutors |>
filter(Status == "Approved") |>
mutate(Tutor = paste(`First name`, `Last name`),
.before = `First name`)
approved |>
full_join(currentTutors, by = "Tutor") |>
filter(is.na(`Lesson Count`)) |>
pull(Tutor)
